# Binance JavaScript SPOT 连接器

[![开放的问题](https://img.shields.io/github/issues/binance/binance-connector-js)](https://github.com/binance/binance-connector-js/issues)
[![代码风格: Prettier](https://img.shields.io/badge/code%20style-prettier-ff69b4)](https://prettier.io/)
[![npm 版本](https://badge.fury.io/js/@binance%2Fspot.svg)](https://badge.fury.io/js/@binance%2Fspot)
[![npm 下载量](https://img.shields.io/npm/dm/@binance/spot.svg)](https://www.npmjs.com/package/@binance/spot)
![Node.js 版本](https://img.shields.io/badge/Node.js-%3E=22.12.0-brightgreen)
[![已知漏洞](https://snyk.io/test/github/binance/binance-connector-js/badge.svg)](https://snyk.io/test/github/binance/binance-connector-js)
[![文档](https://img.shields.io/badge/docs-online-blue?style=flat-square)](https://binance.github.io/binance-connector-js/modules/_binance_spot.html)
[![许可证: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

这是一个用于 Binance SPOT API 的客户端库，使开发者能够通过编程方式与 Binance 的 SPOT 交易平台进行交互。该库通过三个不同的端点提供获取市场数据、执行交易和管理订单的工具：

- [REST API](https://github.com/binance/binance-connector-js/tree/master/clients/spot/src/rest-api/rest-api.ts)
- [Websocket API](https://github.com/binance/binance-connector-js/tree/master/clients/spot/src/websocket-api/websocket-api-connection.ts)
- [Websocket Stream](https://github.com/binance/binance-connector-js/tree/master/clients/spot/src/websocket-streams/websocket-streams-connection.ts)

## 目录

- [支持的功能](#支持的功能)
- [安装](#安装)
- [文档](#文档)
- [REST APIs](#rest-apis)
- [Websocket APIs](#websocket-apis)
- [Websocket Streams](#websocket-streams)
- [测试](#测试)
- [迁移指南](#迁移指南)
- [贡献](#贡献)
- [许可证](#许可证)

## 支持的功能

- REST API 端点：
  - `/api/*`
- WebSocket 端点：实时数据流和请求-响应通信。
- 包含测试用例和示例，便于快速上手。

## 安装

要使用此库，请确保您的环境运行的是 **Node.js 22.12.0** 或更高版本。如果您使用 `nvm`（Node 版本管理器），可以按如下方式设置正确的版本：

```bash
nvm install 22.12.0
nvm use 22.12.0
```

然后使用 `npm` 安装库：

```bash
npm install @binance/spot
```

## 文档

详细信息请参阅 [Binance API 文档](https://developers.binance.com/docs/binance-spot-api-docs/README)。

### REST APIs

所有 REST API 端点都可以通过 [`rest-api`](https://github.com/binance/binance-connector-js/tree/master/clients/spot/src/rest-api/rest-api.ts) 模块使用。REST API 可用于获取市场数据、管理交易和访问账户信息。请注意，某些端点需要使用您的 Binance API 凭证进行身份验证。

```typescript
import { Spot, SpotRestAPI } from '@binance/spot';

const configurationRestAPI = {
    apiKey: 'your-api-key',
    apiSecret: 'your-api-secret',
};
const client = new Spot({ configurationRestAPI });

client.restAPI
    .exchangeInfo({ symbol: 'BNBUSDT' })
    .then((res) => res.data())
    .then((data: SpotRestAPI.ExchangeInfoResponse) => console.log(data))
    .catch((err) => console.error(err));
```

更多示例可以在 [`examples/rest-api`](https://github.com/binance/binance-connector-js/tree/master/clients/spot/examples/rest-api/) 文件夹中找到。

#### 配置选项

REST API 支持以下高级配置选项：

- `timeout`: 请求超时时间（毫秒，默认：1000 毫秒）。
- `proxy`: 代理配置：
  - `host`: 代理服务器主机名。
  - `port`: 代理服务器端口。
  - `protocol`: 代理协议（http 或 https）。
  - `auth`: 代理身份验证凭据：
    - `username`: 代理用户名。
    - `password`: 代理密码。
- `keepAlive`: 启用 HTTP keep-alive（默认：true）。
- `compression`: 启用响应压缩（默认：true）。
- `retries`: 请求失败时的重试次数（默认：3）。
- `backoff`: 重试之间的延迟（毫秒，默认：1000 毫秒）。
- `httpsAgent`: 自定义 HTTPS 代理以进行高级 TLS 配置。
- `privateKey`: 用于身份验证的 RSA 或 ED25519 私钥。
- `privateKeyPassphrase`: 私钥的密码（如果加密）。
- `timeUnit`: 指定时间戳的时间单位（如毫秒或微秒）。

##### 超时

您可以配置请求的超时时间（毫秒）。如果请求超过指定的超时时间，将被中止。有关详细用法，请参阅 [超时示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/rest-api/timeout.md)。

##### 代理

REST API 支持 HTTP/HTTPS 代理配置。有关详细用法，请参阅 [代理示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/rest-api/proxy.md)。

##### 持久连接

为持久连接启用 HTTP keep-alive。有关详细用法，请参阅 [持久连接示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/rest-api/keepAlive.md)。

##### 压缩

启用或禁用响应压缩。有关详细用法，请参阅 [压缩示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/rest-api/compression.md)。

##### 重试

配置请求失败时的重试次数和重试之间的延迟（毫秒）。有关详细用法，请参阅 [重试示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/rest-api/retries.md)。

##### HTTPS 代理

为高级 TLS 配置自定义 HTTPS 代理。有关详细用法，请参阅 [HTTPS 代理示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/rest-api/httpsAgent.md)。

##### 基于密钥对的身份验证

REST API 支持基于密钥对的身份验证以实现安全通信。您可以使用 `RSA` 或 `ED25519` 密钥来签名请求。有关详细用法，请参阅 [基于密钥对的身份验证示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/rest-api/key-pair-authentication.md)。

##### 时间单位

REST API 支持不同的时间戳时间单位。有关详细信息，请参阅 [时间单位示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/rest-api/time-unit.md)。

##### 证书锁定

为了增强安全性，您可以使用配置中的 `httpsAgent` 选项进行证书锁定。这确保客户端仅与使用特定证书的服务器通信。有关详细用法，请参阅 [证书锁定示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/rest-api/certificate-pinning.md)。

#### 错误处理

REST API 提供了详细的错误类型，以帮助您有效地处理问题：

- `ConnectorClientError`: 一般客户端错误。
- `RequiredError`: 当缺少必需参数时抛出。
- `UnauthorizedError`: 表示缺少或无效的身份验证凭据。
- `ForbiddenError`: 禁止访问请求的资源。
- `TooManyRequestsError`: 超出速率限制。
- `RateLimitBanError`: 因超出速率限制而被封禁的 IP 地址。
- `ServerError`: 内部服务器错误。
- `NetworkError`: 网络连接问题。
- `NotFoundError`: 资源未找到。
- `BadRequestError`: 无效请求。

有关详细用法，请参阅 [错误处理示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/rest-api/error-handling.md)。

#### 测试网

为了测试目的，`/api/*` 端点可以在 [Spot Testnet](https://testnet.binance.vision/) 中使用。更新配置中的 `basePath`：

```typescript
import { Spot, SpotRestAPI, SPOT_REST_API_TESTNET_URL } from '@binance/spot';

const configurationRestAPI = {
    apiKey: 'your-api-key',
    apiSecret: 'your-api-secret',
    basePath: SPOT_REST_API_TESTNET_URL,
};
const client = new Spot({ configurationRestAPI });
```

如果未提供 `basePath`，则默认为 `https://api.binance.com`。

### Websocket APIs

WebSocket API 提供市场数据和交易操作的请求-响应通信。使用 [`websocket-api`](https://github.com/binance/binance-connector-js/tree/master/clients/spot/src/websocket-api/websocket-api.ts) 模块与这些端点进行交互。

```typescript
import { Spot, SpotWebsocketAPI } from '@binance/spot';

const configurationWebsocketAPI = {
    apiKey: 'your-api-key',
    apiSecret: 'your-api-secret',
};
const client = new Spot({ configurationWebsocketAPI });

client.websocketAPI
    .connect()
    .then((connection: SpotWebsocketAPI.WebsocketAPIConnection) =>
        connection.exchangeInfo({ symbol: 'BNBUSDT' })
    )
    .then((res: SpotWebsocketAPI.ApiResponse<SpotWebsocketAPI.ExchangeInfoResponse>) =>
        console.log(res.data)
    )
    .catch((err) => console.error(err));
```

更多示例可以在 [`examples/websocket-api`](https://github.com/binance/binance-connector-js/tree/master/clients/spot/examples/websocket-api/) 文件夹中找到。

#### 配置选项

WebSocket API 支持以下高级配置选项：

- `timeout`: 设置 WebSocket 请求的超时时间（默认：5000 毫秒）。
- `reconnectDelay`: 指定重新连接尝试之间的延迟（默认：5000 毫秒）。
- `compression`: 启用或禁用 WebSocket 消息的压缩（默认：true）。
- `agent`: 为高级配置自定义 WebSocket 代理。
- `mode`: 在 `single` 和 `pool` 连接模式之间选择。
  - `single`: 单个 WebSocket 连接。
  - `pool`: 一组 WebSocket 连接。
- `poolSize`: 在池模式中定义 WebSocket 连接的数量。
- `privateKey`: 用于身份验证的 RSA 或 ED25519 私钥。
- `privateKeyPassphrase`: 私钥的密码（如果加密）。
- `timeUnit`: 指定时间戳的时间单位（如毫秒或微秒）。

##### 超时

设置 WebSocket API 请求的超时时间（毫秒）。有关详细用法，请参阅 [超时示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-api/timeout.md)。

##### 重新连接延迟

指定 WebSocket 重新连接尝试之间的延迟（毫秒）。有关详细用法，请参阅 [重新连接延迟示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-api/reconnect-delay.md)。

##### 压缩

启用或禁用 WebSocket 消息的压缩。有关详细用法，请参阅 [压缩示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-api/compression.md)。

##### WebSocket 代理

为高级配置自定义代理。有关详细用法，请参阅 [WebSocket 代理示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-api/agent.md)。

##### 连接模式

在 `single` 和 `pool` 连接模式之间选择。`single` 模式使用单个 WebSocket 连接，而 `pool` 模式使用一组 WebSocket 连接。有关详细用法，请参阅 [连接模式示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-api/connection-mode.md)。

##### 基于密钥对的身份验证

使用 RSA 或 ED25519 私钥进行 WebSocket API 身份验证。有关详细用法，请参阅 [密钥对身份验证示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-api/key-pair-authentication.md)。

##### 证书锁定

为了增强安全性，您可以使用配置中的 `agent` 选项进行证书锁定。这确保客户端仅与使用特定证书的服务器通信。有关详细用法，请参阅 [证书锁定示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-api/certificate-pinning.md)。

##### 时间单位

指定 WebSocket API 时间戳的时间单位（如毫秒或微秒）。有关详细用法，请参阅 [时间单位示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-api/time-unit.md)。

#### 订阅用户数据流

您可以消费用户数据流，该流发送账户级别的事件，如账户和订单更新。首先通过 WebSocket API 进行 `logon`；然后：

```typescript
import { Spot, SpotWebsocketAPI } from '@binance/spot';

const configurationWebsocketAPI = {
    apiKey: 'your-api-key',
    apiSecret: 'your-api-secret',
};
const client = new Spot({ configurationWebsocketAPI });

client.websocketAPI
    .connect()
    .then((connection) => connection.sessionLogon().then(() => connection))
    .then((connection) => connection.userDataStreamSubscribe())
    .then(({ stream }) => {
        stream.on('message', (data) => {
            switch (data.e) {
                case 'balanceUpdate':
                    console.log('余额更新流', data);
                    break;
                case 'outboundAccountPosition':
                    console.log('出站账户持仓流', data);
                    break;
                // …处理其他变体…
                default:
                    console.log('未知流', data);
                    break;
            }
        });
    })
    .catch((err) => console.error(err));
```

#### 测试网

为了测试目的，WebSocket API 也支持测试网环境。更新配置中的 `wsURL`：

```typescript
import { Spot, SpotWebsocketAPI, SPOT_WS_API_TESTNET_URL } from '@binance/spot';

const configurationWebsocketAPI = {
    apiKey: 'your-api-key',
    apiSecret: 'your-api-secret',
    wsURL: SPOT_WS_API_TESTNET_URL,
};
const client = new Spot({ configurationWebsocketAPI });
```

如果未提供 `wsURL`，则默认为 `wss://ws-api.binance.com:443/ws-api/v3`。

### Websocket Streams

WebSocket Streams 提供市场交易、蜡烛图等的实时数据流。使用 [websocket-streams](https://github.com/binance/binance-connector-js/tree/master/clients/spot/src/websocket-streams/websocket-streams.ts) 模块订阅这些流。

```typescript
import { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_PROD_URL } from '@binance/spot';

const configurationWebsocketStreams = {
    wsURL: SPOT_WS_STREAMS_PROD_URL,
};
const client = new Spot({ configurationWebsocketStreams });

client.websocketStreams
    .connect()
    .then((connection: SpotWebsocketStreams.WebsocketStreamsConnection) => {
        const stream = connection.aggTrade({ symbol: 'BNBUSDT' });
        stream.on('message', (data: SpotWebsocketStreams.AggTradeResponse) => console.info(data));
    })
    .catch((err) => console.error(err));
```

更多示例可以在 [`examples/websocket-streams`](https://github.com/binance/binance-connector-js/tree/master/clients/spot/examples/websocket-streams/) 文件夹中找到。

#### 配置选项

WebSocket Streams API 支持以下高级配置选项：

- `reconnectDelay`: 指定重新连接尝试之间的延迟（默认：5000 毫秒）。
- `compression`: 启用或禁用 WebSocket 消息的压缩（默认：true）。
- `agent`: 为高级配置自定义 WebSocket 代理。
- `mode`: 在 `single` 和 `pool` 连接模式之间选择。
  - `single`: 单个 WebSocket 连接。
  - `pool`: 一组 WebSocket 连接。
- `poolSize`: 在池模式中定义 WebSocket 连接的数量。
- `timeUnit`: 指定时间戳的时间单位（如毫秒或微秒）。

##### 重新连接延迟

指定流的 WebSocket 重新连接尝试之间的延迟（毫秒）。有关详细用法，请参阅 [重新连接延迟示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-streams/reconnect-delay.md)。

##### 压缩

启用或禁用 WebSocket Streams 消息的压缩。有关详细用法，请参阅 [压缩示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-streams/compression.md)。

##### WebSocket 代理

为高级配置自定义代理。有关详细用法，请参阅 [WebSocket 代理示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-streams/agent.md)。

##### 连接模式

在 `single` 和 `pool` 连接模式之间选择。`single` 模式使用单个 WebSocket 连接，而 `pool` 模式使用一组 WebSocket 连接。有关详细用法，请参阅 [连接模式示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-streams/connection-mode.md)。

##### 证书锁定

为了增强安全性，您可以使用配置中的 `agent` 选项进行证书锁定。这确保客户端仅与使用特定证书的服务器通信。有关详细用法，请参阅 [证书锁定示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-streams/certificate-pinning.md)。

##### 时间单位

指定 WebSocket Streams 时间戳的时间单位（如毫秒或微秒）。有关详细用法，请参阅 [时间单位示例](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/websocket-streams/time-unit.md)。

#### 取消订阅流

您可以使用 `unsubscribe` 方法取消订阅特定的 WebSocket 流。这对于在不关闭连接的情况下管理活动订阅非常有用。

```typescript
import { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_PROD_URL } from '@binance/spot';

const configurationWebsocketStreams = {
    wsURL: SPOT_WS_STREAMS_PROD_URL,
};
const client = new Spot({ configurationWebsocketStreams });

client.websocketStreams
    .connect()
    .then((connection: SpotWebsocketStreams.WebsocketStreamsConnection) => {
        const stream = connection.aggTrade({ symbol: 'BNBUSDT' });
        stream.on('message', (data: SpotWebsocketStreams.AggTradeResponse) => console.info(data));

        setTimeout(() => {
            stream.unsubscribe();
            console.log('已取消订阅 BNBUSDT 交易流');
        }, 10000);
    })
    .catch((err) => console.error(err));
```

#### 测试网

WebSocket Streams 也支持用于开发和测试的测试网环境。更新配置中的 `wsURL`：

```typescript
import { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_TESTNET_URL } from '@binance/spot';

const configurationWebsocketStreams = {
    wsURL: SPOT_WS_STREAMS_TESTNET_URL,
};
const client = new Spot({ configurationWebsocketStreams });
```

如果未提供 `wsURL`，则默认为 `wss://stream.binance.com:9443`。

### 自动连接续订

WebSocket 连接在 API 密钥 24 小时过期之前会自动续订，无论是 WebSocket API 还是 WebSocket Streams 连接。这确保了持续的连接。

## 测试

运行测试：

```bash
npm install

npm run test
```

测试涵盖：
- REST API 端点
- WebSocket API 和 Streams
- 错误处理和边界情况

## 迁移指南

如果您正在升级到新的模块化结构，请参阅 [迁移指南](https://github.com/binance/binance-connector-js/tree/master/clients/spot/docs/migration_guide_spot_connector.md) 以获取详细步骤。

## 贡献

欢迎贡献！

由于此仓库包含自动生成的代码，我们鼓励您首先在 GitHub 上打开一个问题来讨论您的想法或提出改进建议。这有助于确保更改符合项目的目标和自动生成流程。

要贡献：

1. 打开一个 GitHub 问题，描述您的建议或您发现的 bug。
2. 如果确定需要更改，维护者将更改合并到主分支。

请确保如果您进行直接贡献，所有测试都通过。仅在讨论和确认更改后提交拉取请求。

感谢您的贡献！

## 许可证

本项目采用 MIT 许可证。请参阅 [LICENCE](https://github.com/binance/binance-connector-js/tree/master/clients/spot/LICENCE) 文件以获取详细信息。